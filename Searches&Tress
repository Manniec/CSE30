Theme: Lists have to be sorted for these algorithms to proceed
##Binary Search##
Find 47
5   13  27  32  44  51  68  76
            ^                       #look at middle element, if 32 < 47, discard the half you know its not in
44  51  68  76
    ^                               # Go to new middle, is 57 > 44, yes, discard that half
44
^                                   # is last item. 47 is not 44, 47 is not in the list
- how many comparisons made? 3. Can only go to a new middle log n times
- Pseudocode
    Algoritm BinarySearch (list, value):
        if all elements have been searched:
            return -1
        end if

        mid = middle of the 
- binary search complexity is O(log n) -> number of operations is related to number of cuts
- has no way of verifying if the list is sorted

Summary of Lists:
- only data structures we have explored so far are arrays and linked Lists
- Arrays: Contiguous storage, fast access, slow insertion
- Linked Lists: Separated storage, slow access, fast insertion

Insertion into Arrays:
- Arrays:
    - to do insertion, there has to be enough capacity.
    - inserting to a specific location means you have to move everything after that point to the right, then insert
    - if not enough capacity you need to double up the capacity
    - Worst Case: insertions at or near the front (because you have to shift everything out of the way)
Insertion into Linked List
    - Must have a pointer to position we want to insert at
    - Create a new node somewhere, 

##LETS SORT EVERYTHING?##
- is it a good assumption that everytime you want to work with data you want to sort it. 
- Not so fast! (pun intended) -> sorting takes a long time 
Sorting algorithms
- Selection Sort/ Bubble sort
- insertion sort

So just quick sort once and that's it:
- no!, as you add more and more data to a thing you need to make sure it STAYS sorted

##Maintaining Sorted Order##
5   13  21  54          19
^                       ^
You have two sorted lists, use merge sort -> O(n) comparisons to come up with that
Keeping things in a sorted order is even more difficult than sorting it at once

#Information Systems#
- Information systems store important data
- They have the the folliwing requirements
    - we need to beable to find things efficently
    - we need to be able to insert efficently 
    -(fast searching -> slow insertion, fast insertion -> slow searching)

#Can you improve the merge algorithm#
- Can we use binary search to find the right position and just insert there?
- merge is essentially linear search (compares each item to the item to be inserted)
5   13  21  54          19
    sorted list         new element
- binary search can only help you find where you need to insert, but it will still take O(n) to 
  make room for the insertion
- this applies to arrays, binary search in a linked list makes no sense bc it takes time to find the middle
- with arrays, we need to shift every elemests, with linke dlist we need to get the positon one step a a time
- both require linear amount of work
- so thats why inserting into lists is slow

#Can we do better?#
- We want fast searching and fast insertions. can we do both
- Not with a list we can't
- What else is there?

#Introduciton to Trees#
    4
    ^
   2 5
   ^
  1 3
- A tree is a data structure made up of nodes and edges, wihtout having cycles (no loop)
- node: a thing that holds data (verticies, points, nodes)
- edge: line that connects two nodes together
- children; out of a node
- Each node holds a value, and can have children
- every node is connected to the root in some way
- Parent child relationshitp, a child is a node connected directly to another node movind 
  away from the root
- nodes with common parents are siblings
- a node w no children is called a leaf
- instead of just child parent, you can also talk ancestors and decendents (same as parent and child, 
  but across more than one relationship)

#Binary Search Trees#
- a special type of tree where every node has at most 2 children (thats why its called binary search tree)
- every node has at most 2 children (left and right), or has no children at all (a leave node)
- Values contained in the left subtree of a node nust be less than the value in the node (left smaller right greater)

#Why Binary Search Trees?#
Fast Search:
- assume we have a collection of 1 thousand elements, root is a number close to a halfway point
- left subtree is evverything < 489,, right subtree is >= 489
- searching is extremely fast, go to root first,
- each time we visit a sub-tree and decide to go left or right, eliminating half the tree
- Searching for an element is O(log n), Same as binary search
Elements in sorted order:
- since all selements smaller than a root appear to the left, and larger appear to the right,
  it is sorted
- to read it out, go to the left most node, then its root, then that root's left tree,
How about inserting
         489
        /   \
      342   5
- insertions are O(logn). Unbelievably fast at insertions and at searching

- If there is more than one of the same number ->
	     5		        5
	    / \	           / \
       3   6 	->    3   6
      / \	         / \ /
     1	 4	        1  4 5
- add to the left of the right branch

TREE iN C++

#Manually Building a Tree#
int main(){
    Node* root = new Node(5);

    root -> left = new Node(3); //create a new node and make its value 3
    root -> right = new Node(8); // create new node and make its value 8
    root -> left -> left = new Node(2); // create new node and make  its value 2
}
Should look like 
        5
       / \
      3   8
     /
    2  

#Traversing a tree#
- specify the root of the tree
void traverse(Node* root){
    if(root != NULL){ //not an empty tree
        // check to see if the 5 has a left branch, if it does traverse that first
        traverse(root->left);
        cout << root->data << endl;
        traverse(root->right)
    } //"bubbleing out of the recursion"
}
- O(n)-> call the traversal function for each node. 
- all algorithms will be recursive in nature (bc bimary trees are recursive)

##Inserting to binary trees##
#Complexity funciton#
- O(nlogn) there is a best case and worse case
- if everything is inserted sequentally then that is the worse case (linked list)
        1                               3
         \                             / \
          2         as opposed to     2   5
           \                         /   /  
            3                       1   4
             \
              4
               \
                5

- if everthing is already sorted either in reverse order or in order, the binary tree degenerates into 
  a linked list
- if the worse case is not the most likely scenario (probablilty of the thing being inserted being sorted 
  is very low)
- best case is perfectly balanced binary search tree
            5
           / \
          2   8
         / \ / \
        1  3 6  9

- feed in in the order of:
    5,2,8,1,3,6,9
    or
    5,8,2,1,6,3,9 
    or some sequence where
    5   |   2 8   | 1 3 6 9
    1st |   2nd   | 3rd
- what if the insertion is in sequence 
    9,5,8,2,1,3,6
        9
       /        Still pretty ballanced (only one step away from a balanced tree)
      5   
     / \
    2   8
   / \  /
  1  3  6
#Algoritm#
- specify root of tree & value to be inserted
void insert(Node* root, int x){
    if(root == NULL){ //first check if tree is empty
        root = new Node(x); //create new node and make it the root
    }//now have a tree that is one node big
    else{
        if(root->data > x) {//or x < root->data
            insert(root->left,x); // you already have a function for inserting to the left
        }
        else{
            insert(root->right,x);
        }
    }
}

or
*Node insert(Node* root, int x){
    if(root == NULL){ //first check if tree is empty
        return new Node(x); //create new node and make it the root
    }//now have a tree that is one node big
    else{
        if(root->data > x) {//or x < root->data
            root->left = insert(root->left,x); // you already have a function for inserting to the left
        }
        else{
            root->right = insert(root->right,x);
        }
    }
}
#Inserting 6 into the following tree#
        5
       / \
      3   8
     /   /
    2   6
Process 
- is the root null? no. 
- so is 6 smaller than 5? no.
- so insert to the left of 5.
- is the root to the left of 5 null? no.
- is 6 smaller than 8? yes
- so insert to the right of 8. 
- is the root to the right of 8 null? yes.
- so create a new node w data 6.
- O(nlogn) comparison based sort -> same complexity as merge sort

##Searching##
bool search(Node* root, int value){
    if (root = NULL){
        return false;
    }
    else{
        if (root->data == value){
            return true;
        }
        else{
            if (value < root->data){

            }
        }
    }
}
#Complexity#
- O(logn)

##How can you verify that something is a binary search tree?##
- How do you verify if something is a binary search tree:
    - an empty binary search tree is a binary search tree
    - an bst with a single node is a binary search tree
    - the following are not binary search trees:
            5                           5
             \                           \
              7                           7  
             /                           /  
            4 (4 is less than 5)        14  (14 is greater than 7)
- for each node (mini tree) you can check if the root has children

#BST Deletion#
- if node bieng deleted has children, you can delete easily
- if you delete a node with one child, make that one child the childe of the parent of that node 
            4                       4
           / \                     / \
          2   5         ->        2   6
         / \   \                 / \
        1   3   6               1   3 
- if you delete a node with two children, who each dont have children
            4                       4
           / \                     / \
          2   5         ->        3   6
         / \   \                 / 
        1   3   6               1   
    - remember what 3 is, delete the child node containing 3, then replace the value of the parent node 
      you plan to delete with the child node's value
- what if you want to delete the root? Aka the children of the node you want to delete children 
    - you want to replace the root, you want the succesor of 4, which will be the smallest value on the 
      right side of 4 (so everything to the right will still be bigger)
            4                        7
           /  \                     / \
          2    8         ->        2   8
         / \  / \                 / \   \
        1   3 7  9               1   3   9 (actually deleting node contianing 7, & replacing the value 
                                            at the root)
        - to get the succesor move once to the right and as many times possible to the left (if it does 
          have a right)
    - when your deleting the root, the node you actually end up deleting will never be a node with 2 children
      you will delete one of its decendents (the one with the smallest value)
    - what if the child of the root deleted has one child
            4                       5
           / \                     / \
          2   5         ->        2   6     (actually deleting node continaing the 5, then repair so 6 connects to 
         / \   \                 / \         root)
        1   3   6               1  3 
    - Finding the succesor of x
        succesor(T,x)
            if x.right != null:
                temp = x.right;
                while temp!= Null:
                    temp=temp.left;
            else: return null
        Connect funciton: need to know both left child of x and parent of x
            connect(x.left, x.parent);
            remove x
    - What if the node doesnt have a succesor
            5   (thing you are deleting doesnt have a succesor -> pick immediate predecesor)
           /
          4
         /
        3    
        - if a node has 2 children it is guaranteed to have a succesor (because it will always have a right node)
    - if x only has a right child
        5
         \
          6 <-x
           \
            7
        x.parent.right = x.right
